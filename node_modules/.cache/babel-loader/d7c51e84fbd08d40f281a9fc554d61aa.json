{"ast":null,"code":"var _jsxFileName = \"D:\\\\FoodShades\\\\FoodShades\\\\src\\\\Components\\\\Layout\\\\HeaderCartButton.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport classes from './HeaderCartButton.module.css';\nimport CartIcon from '../Cart/CartIcon';\nimport cartContext from '../../Source/cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeaderCartButton = props => {\n  _s();\n\n  const ctx = useContext(cartContext);\n  const [cartBtnIsHighlighted, setCartBtnIsHighlighted] = useState(false); // This will help in updating amount on cart button also as this will make this comp execute again\n\n  const btnClass = ` ${classes.button} ${cartBtnIsHighlighted ? classes.bump : ''} `;\n  useEffect(() => {\n    if (ctx.itemList.length === 0) {\n      return; // We dont want to bump the Cart button if no item is added in cart.\n    }\n\n    setCartBtnIsHighlighted(true);\n    const timerId = setTimeout(() => {\n      setCartBtnIsHighlighted(false);\n    }, 300);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [ctx.itemList]);\n  var noOfCartItems = 0;\n  const arr = ctx.itemList.map(item => item.amount); // Array of amount of items in cart\n\n  for (let i = 0; i < arr.length; i++) {\n    noOfCartItems += arr[i];\n  } // We can also use .reduce() array method as shown below\n\n  /* const noOfCartItems = ctx.itemList.reduce( (currNumber,item) => {\r\n       return currNumber + item.amount;\r\n   } ,0 );   //We use this to count no. of times any meal is added.\r\n   /*We should not use ctx.itemList.length as it will not give correct no. of meals ordered as it will not count \r\n   the amount(no. of times) the meal is ordered*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: btnClass,\n    onClick: props.onClick,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.icon,\n      children: /*#__PURE__*/_jsxDEV(CartIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: classes.badge,\n      children: [\" \", noOfCartItems]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 12\n  }, this);\n}; // First span has CartIcom component which stores svg code\n// This is just to render that icon before the Your Cart text in the Cart button.\n// We can igone this as well\n\n\n_s(HeaderCartButton, \"dyGoHbxS5+WmG3z3uRPdbtmMAJo=\");\n\n_c = HeaderCartButton;\nexport default HeaderCartButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderCartButton\");","map":{"version":3,"sources":["D:/FoodShades/FoodShades/src/Components/Layout/HeaderCartButton.js"],"names":["useContext","useEffect","useState","classes","CartIcon","cartContext","HeaderCartButton","props","ctx","cartBtnIsHighlighted","setCartBtnIsHighlighted","btnClass","button","bump","itemList","length","timerId","setTimeout","clearTimeout","noOfCartItems","arr","map","item","amount","i","onClick","icon","badge"],"mappings":";;;AAAA,SAASA,UAAT,EAAoBC,SAApB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAAA;;AAE9B,QAAMC,GAAG,GAAGR,UAAU,CAACK,WAAD,CAAtB;AACA,QAAM,CAACI,oBAAD,EAAsBC,uBAAtB,IAAiDR,QAAQ,CAAC,KAAD,CAA/D,CAH8B,CAG4C;;AAC1E,QAAMS,QAAQ,GAAI,IAAGR,OAAO,CAACS,MAAO,IAAGH,oBAAoB,GAAGN,OAAO,CAACU,IAAX,GAAkB,EAAG,GAAhF;AACAZ,EAAAA,SAAS,CAAE,MAAM;AACb,QAAGO,GAAG,CAACM,QAAJ,CAAaC,MAAb,KAAwB,CAA3B,EAA6B;AACzB,aADyB,CAClB;AACV;;AAEDL,IAAAA,uBAAuB,CAAC,IAAD,CAAvB;AAEA,UAAMM,OAAO,GAACC,UAAU,CAAE,MAAI;AAC9BP,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AAA+B,KADP,EAErB,GAFqB,CAAxB;AAIC,WAAO,MAAM;AACTQ,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGJ,GAdQ,EAcL,CAACR,GAAG,CAACM,QAAL,CAdK,CAAT;AAeA,MAAIK,aAAa,GAAG,CAApB;AACA,QAAMC,GAAG,GAAGZ,GAAG,CAACM,QAAJ,CAAaO,GAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACC,MAAjC,CAAZ,CArB8B,CAqB0B;;AACxD,OAAM,IAAIC,CAAC,GAAC,CAAZ,EAAgBA,CAAC,GAAEJ,GAAG,CAACL,MAAvB,EAAgCS,CAAC,EAAjC,EAAoC;AAChCL,IAAAA,aAAa,IAAEC,GAAG,CAACI,CAAD,CAAlB;AACH,GAxB6B,CAyB9B;;AACD;AACH;AACA;AACA;AACA;;;AAEI,sBAAO;AAAQ,IAAA,SAAS,EAAEb,QAAnB;AAA6B,IAAA,OAAO,EAAEJ,KAAK,CAACkB,OAA5C;AAAA,4BACH;AAAM,MAAA,SAAS,EAAEtB,OAAO,CAACuB,IAAzB;AAAA,6BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADG,eAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJG,eAKH;AAAM,MAAA,SAAS,EAAEvB,OAAO,CAACwB,KAAzB;AAAA,sBACKR,aADL;AAAA;AAAA;AAAA;AAAA;AAAA,YALG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AASH,CAzCD,C,CA2CA;AACA;AACA;;;GA7CMb,gB;;KAAAA,gB;AA+CN,eAAeA,gBAAf","sourcesContent":["import { useContext,useEffect , useState } from 'react';\r\nimport classes from './HeaderCartButton.module.css';\r\nimport CartIcon from '../Cart/CartIcon';\r\nimport cartContext from '../../Source/cart-context';\r\n\r\nconst HeaderCartButton = props => {\r\n\r\n    const ctx = useContext(cartContext);\r\n    const [cartBtnIsHighlighted,setCartBtnIsHighlighted] = useState(false);   // This will help in updating amount on cart button also as this will make this comp execute again\r\n    const btnClass = ` ${classes.button} ${cartBtnIsHighlighted ? classes.bump : ''} `\r\n    useEffect( () => {\r\n        if(ctx.itemList.length === 0){\r\n            return;// We dont want to bump the Cart button if no item is added in cart.\r\n        }\r\n\r\n        setCartBtnIsHighlighted(true);\r\n\r\n        const timerId=setTimeout( ()=>{\r\n        setCartBtnIsHighlighted(false)}\r\n         , 300 );\r\n\r\n         return () => {\r\n             clearTimeout(timerId);\r\n         }\r\n    } , [ctx.itemList]);\r\n    var noOfCartItems = 0;\r\n    const arr = ctx.itemList.map( (item) => item.amount );  // Array of amount of items in cart\r\n    for ( let i=0 ; i< arr.length ; i++){\r\n        noOfCartItems+=arr[i];\r\n    }\r\n    // We can also use .reduce() array method as shown below\r\n   /* const noOfCartItems = ctx.itemList.reduce( (currNumber,item) => {\r\n        return currNumber + item.amount;\r\n    } ,0 );   //We use this to count no. of times any meal is added.\r\n    /*We should not use ctx.itemList.length as it will not give correct no. of meals ordered as it will not count \r\n    the amount(no. of times) the meal is ordered*/\r\n\r\n    return <button className={btnClass} onClick={props.onClick} >\r\n        <span className={classes.icon}>\r\n            <CartIcon/>\r\n        </span>\r\n        <span>Your Cart</span>\r\n        <span className={classes.badge}> {/*This is to show no. of items in cart */}\r\n            {noOfCartItems}\r\n        </span>\r\n    </button>\r\n}\r\n\r\n// First span has CartIcom component which stores svg code\r\n// This is just to render that icon before the Your Cart text in the Cart button.\r\n// We can igone this as well\r\n\r\nexport default HeaderCartButton ;"]},"metadata":{},"sourceType":"module"}