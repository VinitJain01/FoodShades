{"ast":null,"code":"var _jsxFileName = \"D:\\\\FoodShades\\\\FoodShades\\\\src\\\\Source\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport cartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  itemList: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADDED') {\n    const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.itemList.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.itemList[existingCartItemIndex]; // let updateditemInList;\n\n    let updatedItemsList;\n\n    if (existingCartItem) {\n      existingCartItem.amount = existingCartItem.amount + action.item.amount; // To update the amount by overwritting on amount in existingCartItem\n\n      /*updateditemInList = {\r\n          ...existingCartItem,\r\n          amount : (existingCartItem.amount + action.item.amount)// To update the amount by overwritting on amount in existingCartItem\r\n      }; */\n\n      updatedItemsList = [...state.itemList];\n      updatedItemsList[existingCartItemIndex] = existingCartItem;\n    } else {\n      updatedItemsList = state.itemList.concat(action.item);\n    }\n\n    ;\n    return {\n      itemList: updatedItemsList,\n      totalAmount: newTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVED') {\n    const existingCartItemIndex = state.itemList.findIndex(item => item.id === action.id);\n    const existingCartItem = state.itemList[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingCartItem.price;\n    let updatedItemList;\n\n    if (existingCartItem.amount === 1) {\n      updatedItemList = state.itemList.filter(item => item.id !== action.id);\n    } else {\n      const updatedExistingCartItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      updatedItemList = [...state.itemList];\n      updatedItemList[existingCartItemIndex] = updatedExistingCartItem;\n    }\n\n    return {\n      itemList: updatedItemList,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'CLEAR') {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemtoCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADDED',\n      item: item\n    });\n  };\n\n  const removeItemtoCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVED',\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      type: 'CLEAR'\n    });\n  };\n\n  const values = {\n    // INITIAL STATEs\n    itemList: cartState.itemList,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemtoCartHandler,\n    removeItem: removeItemtoCartHandler,\n    clearCart: clearCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(cartContext.Provider, {\n    value: values,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 13\n  }, this);\n};\n\n_s(CartProvider, \"irLoCnUjZMazMtjqft6WkB530Qg=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/FoodShades/FoodShades/src/Source/CartProvider.js"],"names":["useReducer","cartContext","defaultCartState","itemList","totalAmount","cartReducer","state","action","type","newTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItemsList","concat","updatedTotalAmount","updatedItemList","filter","updatedExistingCartItem","CartProvider","props","cartState","dispatchCartAction","addItemtoCartHandler","removeItemtoCartHandler","clearCartHandler","values","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import { useReducer } from 'react';\r\nimport cartContext from './cart-context' ;\r\n\r\nconst defaultCartState = {\r\n    itemList : [],\r\n    totalAmount : 0\r\n};\r\nconst cartReducer = (state,action) => {\r\n    if(action.type === 'ADDED'){\r\n        const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n        const existingCartItemIndex = state.itemList.findIndex( item => item.id === action.item.id );\r\n        const existingCartItem = state.itemList[existingCartItemIndex];\r\n       // let updateditemInList;\r\n        let updatedItemsList ;\r\n\r\n        if(existingCartItem){\r\n            existingCartItem.amount = (existingCartItem.amount + action.item.amount);\r\n            // To update the amount by overwritting on amount in existingCartItem\r\n            /*updateditemInList = {\r\n                ...existingCartItem,\r\n                amount : (existingCartItem.amount + action.item.amount)// To update the amount by overwritting on amount in existingCartItem\r\n            }; */\r\n            updatedItemsList = [...state.itemList];\r\n            updatedItemsList[existingCartItemIndex] = existingCartItem;\r\n        }else{\r\n            updatedItemsList = state.itemList.concat(action.item);\r\n        };\r\n        return ({\r\n            itemList : updatedItemsList,\r\n            totalAmount : newTotalAmount\r\n        });\r\n    }\r\n    if(action.type === 'REMOVED'){\r\n        const existingCartItemIndex = state.itemList.findIndex( (item) => item.id === action.id );\r\n        const existingCartItem = state.itemList[existingCartItemIndex];\r\n        const updatedTotalAmount = state.totalAmount - existingCartItem.price;\r\n        let updatedItemList;\r\n        if(existingCartItem.amount === 1 ){\r\n            updatedItemList = state.itemList.filter( item => item.id !== action.id);\r\n        }else{\r\n            const updatedExistingCartItem ={ ...existingCartItem , amount : existingCartItem.amount - 1 };\r\n            updatedItemList = [...state.itemList];\r\n            updatedItemList[existingCartItemIndex] = updatedExistingCartItem;\r\n        }\r\n        return ({\r\n            itemList : updatedItemList,\r\n            totalAmount : updatedTotalAmount\r\n        });\r\n    }\r\n    if(action.type === 'CLEAR'){\r\n        return defaultCartState;\r\n    }\r\n    return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n\r\n    const [cartState , dispatchCartAction] = useReducer(cartReducer , defaultCartState);\r\n\r\n    const addItemtoCartHandler = (item) => {\r\n        dispatchCartAction( {type:'ADDED', item:item\r\n         } );\r\n    };\r\n    const removeItemtoCartHandler = (id) => {\r\n        dispatchCartAction( {type:'REMOVED', id:id\r\n         } );\r\n    };\r\n    const clearCartHandler = () => {\r\n        dispatchCartAction( {type:'CLEAR'} );\r\n    }\r\n\r\n    const values = {                              // INITIAL STATEs\r\n        itemList : cartState.itemList,\r\n        totalAmount : cartState.totalAmount, \r\n        addItem : addItemtoCartHandler ,\r\n        removeItem: removeItemtoCartHandler,\r\n        clearCart : clearCartHandler\r\n    };\r\n\r\n    return (<cartContext.Provider value={values}>\r\n        {props.children}\r\n    </cartContext.Provider>);\r\n}\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}