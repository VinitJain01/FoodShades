{"ast":null,"code":"var _jsxFileName = \"D:\\\\FoodShades\\\\FoodShades\\\\src\\\\Components\\\\Cart\\\\Cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport styles from './Cart.module.css';\nimport Modal from \"../UI/Modal\";\nimport CartItem from './CartItem';\nimport cartContext from '../../Source/cart-context';\nimport Checkout from './Checkout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cart(props) {\n  _s();\n\n  const [isOrdered, setIsOrdered] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [didSubmitted, setDidSubmitted] = useState(false);\n  const cartCtx = useContext(cartContext);\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\n  const hasItemInCart = cartCtx.itemList.length > 0; // Only then it will show order button\n\n  const CartItemAddHandler = item => {\n    cartCtx.addItem({ ...item,\n      amount: 1\n    }); // on clicking on + button we want to add only 1 amount of that item \n  };\n\n  const CartItemRemoveHandler = id => {\n    cartCtx.removeItem(id);\n  };\n\n  const cartItems = /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: styles['cart-items'],\n    children: cartCtx.itemList.map(item => /*#__PURE__*/_jsxDEV(CartItem, {\n      name: item.name,\n      price: item.price,\n      amount: item.amount,\n      onAdd: CartItemAddHandler.bind(null, item),\n      onRemove: CartItemRemoveHandler.bind(null, item.id)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n\n  const orderClickHandler = () => {\n    setIsOrdered(true);\n  };\n\n  const finalSubmitOrderHandler = async userData => {\n    setIsSubmitting(true);\n    const response = await fetch('https://react-app-fff65-default-rtdb.firebaseio.com/orders.json', {\n      method: 'POST',\n      body: JSON.stringify({\n        user: userData,\n        orderedItems: cartCtx.itemList\n      })\n    });\n    setIsSubmitting(false);\n    setDidSubmitted(true);\n    cartCtx.clearCart();\n  };\n\n  const modalContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [cartItems, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.total,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Total Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: totalAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), isOrdered && /*#__PURE__*/_jsxDEV(Checkout, {\n      onConfirm: finalSubmitOrderHandler,\n      onCancel: props.onClickOnClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 27\n    }, this), !isOrdered && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles['button--alt'],\n        onClick: props.onClickOnClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), hasItemInCart && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.button,\n        onClick: orderClickHandler,\n        children: \"Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 26\n  }, this);\n\n  const modalContentWhileSubmitting = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Submitting your request.....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 41\n  }, this);\n\n  const modalContentafterSubmitted = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your Order is Placed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actions,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.button,\n        onClick: props.onClickOnClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 40\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: [!isSubmitting && !didSubmitted && modalContent, isSubmitting && modalContentWhileSubmitting, didSubmitted && !isSubmitting && modalContentafterSubmitted]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cart, \"LXZzjK9GbdCzP7zGsM7WDiWnIM0=\");\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["D:/FoodShades/FoodShades/src/Components/Cart/Cart.js"],"names":["React","useContext","useState","styles","Modal","CartItem","cartContext","Checkout","Cart","props","isOrdered","setIsOrdered","isSubmitting","setIsSubmitting","didSubmitted","setDidSubmitted","cartCtx","totalAmount","toFixed","hasItemInCart","itemList","length","CartItemAddHandler","item","addItem","amount","CartItemRemoveHandler","id","removeItem","cartItems","map","name","price","bind","orderClickHandler","finalSubmitOrderHandler","userData","response","fetch","method","body","JSON","stringify","user","orderedItems","clearCart","modalContent","total","onClickOnClose","actions","button","modalContentWhileSubmitting","modalContentafterSubmitted"],"mappings":"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","sourcesContent":["import React, { useContext , useState } from 'react';\r\nimport styles from './Cart.module.css';\r\nimport Modal from \"../UI/Modal\";\r\nimport CartItem from './CartItem';\r\nimport cartContext from '../../Source/cart-context';\r\nimport Checkout from './Checkout';\r\n\r\nfunction Cart (props) {\r\n\r\n    const [isOrdered , setIsOrdered] = useState(false);\r\n    const [isSubmitting , setIsSubmitting] =useState(false);\r\n    const [didSubmitted , setDidSubmitted] =useState(false);\r\n\r\n    const cartCtx = useContext(cartContext);\r\n\r\n    const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\r\n    const hasItemInCart = cartCtx.itemList.length>0;    // Only then it will show order button\r\n\r\n    const CartItemAddHandler = (item) => {\r\n        cartCtx.addItem({...item , amount:1});  // on clicking on + button we want to add only 1 amount of that item \r\n    };\r\n    const CartItemRemoveHandler = (id) => {\r\n        cartCtx.removeItem(id);\r\n    };    \r\n    const cartItems = (\r\n        <ul className={styles['cart-items']}>\r\n            {cartCtx.itemList.map( (item) => \r\n            <CartItem key={item.id} \r\n                    name={item.name} \r\n                    price={item.price} \r\n                    amount={item.amount} \r\n                    onAdd={CartItemAddHandler.bind(null, item)}\r\n                    onRemove={CartItemRemoveHandler.bind(null, item.id)}/>)}\r\n        </ul>\r\n    );\r\n\r\n    const orderClickHandler = () => {\r\n        setIsOrdered(true);\r\n    }\r\n\r\n    const finalSubmitOrderHandler = async (userData) => {\r\n        setIsSubmitting(true);\r\n        const response = await fetch('https://react-app-fff65-default-rtdb.firebaseio.com/orders.json' , {\r\n            method : 'POST',\r\n            body : JSON.stringify({\r\n                user : userData,\r\n                orderedItems : cartCtx.itemList\r\n            })\r\n        } );\r\n        setIsSubmitting(false);\r\n        setDidSubmitted(true);\r\n        cartCtx.clearCart();\r\n    }\r\n\r\n    const modalContent = <React.Fragment>\r\n        {cartItems}\r\n            <div className={styles.total}>\r\n                <span>Total Amount</span>\r\n                <span>{totalAmount}</span>\r\n            </div>\r\n            {isOrdered && <Checkout onConfirm = {finalSubmitOrderHandler} onCancel={props.onClickOnClose}/>}\r\n            {!isOrdered && <div className={styles.actions}>\r\n                <button className={styles['button--alt']} onClick={props.onClickOnClose} >Close</button>\r\n                {hasItemInCart&&<button className={styles.button} onClick={orderClickHandler} >Order</button>}\r\n            </div>} \r\n    </React.Fragment>\r\n\r\n    const modalContentWhileSubmitting = <p>Submitting your request.....</p>\r\n    const modalContentafterSubmitted = <React.Fragment>\r\n        <p>Your Order is Placed</p>\r\n            <div className={styles.actions}>\r\n                <button className={styles.button} onClick={props.onClickOnClose} >Close</button>\r\n            </div>\r\n        </React.Fragment> \r\n\r\n    return(\r\n        <Modal>\r\n            {!isSubmitting && !didSubmitted && modalContent}\r\n            {isSubmitting && modalContentWhileSubmitting}\r\n            {didSubmitted && !isSubmitting && modalContentafterSubmitted}\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default Cart;"]},"metadata":{},"sourceType":"module"}